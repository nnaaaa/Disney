version: "3.9"

services:
  gateway:
    build: ./DisneyServer/Gateway
    command: npm run start:dev
    volumes:
      - ./DisneyServer/Gateway:/app/Gateway
      - /app/Gateway/node_modules
    ports:
      - ${GATEWAY_PORT}:${GATEWAY_PORT}
    environment:
      DB_HOST: gateway-database
      DB_PORT: ${GATEWAY_DB_PORT}
      DB_USER: root
      DB_PASSWORD: dummyguys
      DB_DB: disney
      MESSAGE_BROKER_PORT: ${KAFKA_DOCKER_PORT}
      MESSAGE_BROKER_HOST: message-broker
    depends_on:
      # - message-broker
      - gateway-database
      # - message-server

  # gateway-database:
  #   image: mysql:5.7
  #   command: --default-authentication-plugin=mysql_native_password
  #   volumes:
  #     - mysql-data:/var/lib/mysql
  #   environment:
  #     MYSQL_ROOT_PASSWORD: dummyguys
  #     MYSQL_DATABASE: disney

  # gateway-database-manager:
  #   image: phpmyadmin/phpmyadmin:4.7
  #   ports:
  #     - ${GATEWAY_DB_MANAGER_PORT}:80
  #   environment:
  #     MYSQL_ROOT_PASSWORD: dummyguys
  #     PMA_HOST: gateway-database
  #     PMA_PORT: ${GATEWAY_DB_PORT}
  #     PMA_USER: root
  #     PMA_PASSWORD: dummyguys
  #   depends_on:
  #     - gateway-database

  gateway-database:
    image: postgres:14.4
    ports:
      - ${GATEWAY_DB_PORT}:${GATEWAY_DB_PORT}
    volumes:
      - disney-data:/var/lib/postgresql
    environment:
      POSTGRES_USER: root
      POSTGRES_DB: disney
      POSTGRES_PASSWORD: dummyguys
      PG_TRUST_LOCALNET: true

  gateway-database-manager:
    image: michalhosna/adminer:4.7.7-en_v1
    ports:
      - 8080:8080
    depends_on:
      - gateway-database
    environment:
      ADMINER_PASSWORD: dummyguys
      ADMINER_USERNAME: root
      ADMINER_DB: disney
      ADMINER_DRIVER: pgsql
      ADMINER_SERVER: gateway-database
      ADMINER_AUTOLOGIN: 1
      ADMINER_NAME: Disney Land!

  bot-manager:
    stdin_open: true
    build: ./BotManager
    command: npm start
    volumes:
      - ./BotManager:/app/BotManager
      - /app/BotManager/node_modules
    ports:
      - ${BOT_MANAGER_PORT}:${BOT_MANAGER_PORT}
    environment:
      SERVER_HOST: gateway
      SERVER_PORT: ${GATEWAY_PORT}
      WATCHPACK_POLLING: true

    depends_on:
      - gateway


volumes:
  disney-data:
  # mongodb:
  # mongoconfig:

  # message-server:
  #   build: ./MessageService
  #   command: npm run start:dev
  #   volumes:
  #     - ./MessageService:/app/MessageService
  #     - /app/MessageService/node_modules
  #   environment:
  #     DB_HOST: message-database
  #     DB_PORT: ${MESSAGE_DB_PORT}
  #     DB_USER: root
  #     DB_PASSWORD: dummyguys
  #     DB_DB: disney
  #     MESSAGE_BROKER_PORT: ${KAFKA_DOCKER_PORT}
  #     MESSAGE_BROKER_HOST: message-broker
  #   depends_on:
  #     - message-broker
  #     - message-database

  # message-database:
  #   image: mongo:4.2.21-bionic
  #   ports:
  #     - ${MESSAGE_DB_PORT}:${MESSAGE_DB_PORT}
  #   volumes:
  #     - mongodb:/data/db
  #     - mongoconfig:/data/configdb
  #   environment:
  #     MONGO_INITDB_DATABASE: disney
  #     MONGO_INITDB_ROOT_USERNAME: root
  #     MONGO_INITDB_ROOT_PASSWORD: dummyguys

  # message-database-manager:
  #   image: mongo-express:1.0.0-alpha.4
  #   ports:
  #     - ${MESSAGE_DB_MANAGER_PORT}:${MESSAGE_DB_MANAGER_PORT}
  #   environment:
  #     ME_CONFIG_MONGODB_ADMINUSERNAME: root
  #     ME_CONFIG_MONGODB_ADMINPASSWORD: dummyguys
  #     ME_CONFIG_MONGODB_SERVER: message-database
  #     ME_CONFIG_MONGODB_PORT: ${MESSAGE_DB_PORT}
  #   depends_on:
  #     - message-database

  # zookeeper:
  #   image: confluentinc/cp-zookeeper:latest
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_DOCKER_PORT}
  #     ZOOKEEPER_TICK_TIME: 2000
  #   ports:
  #     - 22181:${ZOOKEEPER_DOCKER_PORT}

  # message-broker:
  #   image: confluentinc/cp-kafka:latest
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - 29092:29092
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_DOCKER_PORT}
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://message-broker:${KAFKA_DOCKER_PORT},PLAINTEXT_HOST://localhost:29092
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  # kafdrop:
  #   image: obsidiandynamics/kafdrop:latest
  #   stdin_open: true
  #   depends_on:
  #     - message-broker
  #   ports:
  #     - 9000:9000
  #   environment:
  #     SERVER_PORT: 9000
  #     KAFKA_BROKERCONNECT: message-broker:${KAFKA_DOCKER_PORT}

